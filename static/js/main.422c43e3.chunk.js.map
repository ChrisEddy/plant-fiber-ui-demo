{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","controllers","useXR","useThree","gl","camera","mesh","useRef","useEffect","xr","cam","isPresenting","getCamera","current","add","remove","length","forEach","c","grip","webxr","position","ref","scale","attach","args","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOA4CeA,EAvCH,SAACC,GAAW,IAEdC,EAAgBC,kBAAhBD,YAFa,EAGEE,qBAAfC,EAHa,EAGbA,GAAIC,EAHS,EAGTA,OACNC,EAAOC,iBAAO,MAiBpB,OAfAC,qBAAU,WACR,UAAIJ,QAAJ,IAAIA,OAAJ,EAAIA,EAAIK,GAAI,CACV,IAAMC,EAAMN,EAAGK,GAAGE,aAAeP,EAAGK,GAAGG,UAAUP,GAAUA,EAE3D,OADAC,EAAKO,QAAQC,IAAIJ,GACV,kBAAMJ,EAAKO,QAAQE,OAAOL,OAElC,QAACN,QAAD,IAACA,OAAD,EAACA,EAAIK,GAAGE,aAAR,OAAsBP,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAIK,GAAIJ,EAAQC,IAEzCE,qBAAU,WACR,GAAIP,EAAYe,OAAS,EAEvB,OADAf,EAAYgB,SAAQ,SAAAC,GAAC,OAAIZ,EAAKO,QAAQC,IAAII,EAAEC,SACrC,kBAAMlB,EAAYgB,SAAQ,SAAAC,GAAC,OAAIZ,EAAKO,QAAQE,OAAOG,EAAEC,YAE7D,CAAClB,EAAaK,IAGf,kBAAC,SAAD,CAAQc,OAAK,GACX,kBAAC,uBAAD,MACA,uCACA,gCAAYC,SAAU,CAAC,GAAI,GAAI,MAC/B,kBAAC,MAAD,CAAKA,SAAU,EAAE,IAAK,EAAG,KACzB,kBAAC,MAAD,CAAKA,SAAU,CAAC,IAAK,EAAG,KACxB,0CACMrB,EADN,CAEEsB,IAAKhB,EACLiB,MAAO,CAAC,EAAG,EAAG,KAEd,0CAAsBC,OAAO,WAAWC,KAAM,CAAC,GAAK,KACpD,0CAAsBD,OAAO,WAAWE,MAAO,WAZnD,SCfgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.422c43e3.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport { Canvas, Box } from 'plant-fiber-ui';\nimport { DefaultXRControllers, useXR } from 'react-xr'\nimport { useThree } from 'react-three-fiber';\n\nconst App = (props) => {\n\n  const { controllers } = useXR()\n  const { gl, camera } = useThree()\n  const mesh = useRef(null)\n\n  useEffect(() => {\n    if (gl?.xr) {\n      const cam = gl.xr.isPresenting ? gl.xr.getCamera(camera) : camera\n      mesh.current.add(cam)\n      return () => mesh.current.remove(cam)\n    }\n  }, [gl?.xr.isPresenting, gl?.xr, camera, mesh])\n\n  useEffect(() => {\n    if (controllers.length > 0) {\n      controllers.forEach(c => mesh.current.add(c.grip))\n      return () => controllers.forEach(c => mesh.current.remove(c.grip))\n    }\n  }, [controllers, mesh])\n\n  return (\n    <Canvas webxr>\n      <DefaultXRControllers />\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      <Box position={[-1.2, 0, 0]} />\n      <Box position={[1.2, 0, 0]} />\n      <mesh\n        {...props}\n        ref={mesh}\n        scale={[1, 1, 1]}\n      >\n        <circleBufferGeometry attach=\"geometry\" args={[0.5, 3]} />\n        <meshStandardMaterial attach=\"material\" color={'green'} />\n      </mesh>    </Canvas>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}